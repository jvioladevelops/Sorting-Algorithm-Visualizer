{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","i","j","push","length","merge","getQuickSortAnimations","quickSort","pivotIndex","pivot","swapValues","partitionArray","firstIndex","secondIndex","temporary","getSelectionSortAnimations","auxArray","minIndex","selectionSort","getBubbleSortAnimations","bubbleSort","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","restoreArray","restoreStoreButtons","document","getElementById","disabled","style","background","buttonStyle","cursor","disableSortButtons","disableArray","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","barIndex","barStyle","styles","opacity","className","position","display","map","value","idx","key","width","minHeight","title","id","top","onClick","left","SORT_BUTTONS","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.a528457b.chunk.js","sourcesContent":["/**\n * Here is the code for the merge sort algorithm\n * @param {*} array \n */\n\nexport function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n/**\n * A divide an conquer technique to sorting. Merge sort divides the main array into subarrays and sorts each subsequent \n * sub array.\n * @param {*} auxillaryArray \n * @param {*} startIndex \n * @param {*} endIndex \n * @param {*} animations \n */\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        animations.push([i, j]);\n        animations.push([i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\n","/**\n * Here is the quicksort algorithm\n * @param {*} array \n */\nexport function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n/**\n * Quick sort uses the first index in the array as a pivot, and moves all values smaller than it to the left\n * and all values larger to the right. It is a fast algorithm used in practice. \n * @param {*} auxillaryArray \n * @param {*} startIndex \n * @param {*} endIndex \n * @param {*} animations \n */\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swapValues(auxillaryArray, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swapValues(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swapValues(auxillaryArray, firstIndex, secondIndex) {\n    let temporary = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temporary;\n}\n\n","/**\n * Here is the code for the selection sort algorithm \n */\nexport function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n/**\n * selection sort moves sorted values onto the left side of the array, until the entire array has been sorted. \n * @param {*} auxillaryArray \n * @param {*} animations \n */\nfunction selectionSort(auxillaryArray, animations) {\n    const auxArray = auxillaryArray.length;\n    for (let i = 0; i < auxArray - 1; i++) {\n        let minIndex = i; \n        for (let j = i + 1; j < auxArray; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        swapValues(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swapValues(auxillaryArray, firstIndex, secondIndex) {\n    let temporary = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temporary;\n}\n\n","/**\n * Here is the alogorithm for bubble sort\n * \n */\n\nexport function getBubbleSortAnimations(array) {\n    //create an array of animations that is called in 'SortingVisualizer.js'\n    let animations  = [];\n    //use an aux array to set new values \n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n//iterate through the array comparing each value as you go, if initial value is > compare value, then swapValues\nfunction bubbleSort(auxillaryArray, animations) {\n    const auxArray = auxillaryArray.length;\n    for (let i = 0; i < auxArray - 1; i++) {\n        for (let j = 0; j < auxArray - i -1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swapValues(auxillaryArray, j, j + 1);\n            }\n            else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\n/**\n * Swap values function \n * @param {*} auxillaryArray \n * @param {*} firstIndex \n * @param {*} secondIndex \n */\nfunction swapValues(auxillaryArray, firstIndex, secondIndex) {\n    let temporary = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temporary;\n}\n\n","/**\n * This is the class for the sorting visualizer\n * A project that animates the mergesort algorithm, quicksort algorithm, bubblesort algorithm, and selectionsort algorithm \n */\n\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\n\n/**\n * Setting our global variables, making them easily adjustable. \n */\nlet NUMBER_OF_ARRAY_BARS = 130;\nlet MIN_INTEGER = 5;\nlet MAX_INTEGER = 500;\nconst PRIMARY_COLOR = 'white';\nconst SECONDARY_COLOR = 'red'; \nconst ANIMATION_SPEED_MS = 2; \nconst ANIMATION_SPEED_MS_BUBBLE_SELECTION = 0.75;\n\n/**\n * Grabbing a random integer from interval to create a random array \n * @param {*} min \n * @param {*} max \n */\nfunction randomIntFromInterval(min, max) {\n    return Math.random() * (max - min) + min;\n   \n}\n\n/**\n * Sorting Visualizer class\n */\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n    /**\n     * Reset the array\n     */\n    resetArray() {\n        const array = []\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\n            array.push(randomIntFromInterval(MIN_INTEGER,MAX_INTEGER));\n        }\n        this.setState({array: array});\n        this.restoreArray();\n        this.restoreStoreButtons();\n    }\n    /**\n     * change the color of the button and the state\n     */\n    restoreArray(){\n        document.getElementById(\"resetArray\").disabled = false;\n        let buttonStyle = document.getElementById(\"resetArray\").style;\n        buttonStyle.background = \"#000000\";\n    }\n    /**\n     * disable array button \n     */\n    disableArray(){\n        document.getElementById(\"resetArray\").disabled = true;\n        let buttonStyle = document.getElementById(\"resetArray\").style;\n        buttonStyle.background = \"#788f7d\";\n    }\n/**\n * disable sort buttons and change color\n */\n    disableSortButtons() {\n        document.getElementById(\"mergeSort\").disabled = true;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#788f7d\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#788f7d\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#788f7d\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#788f7d\";\n    }\n    /**\n     * restore the sort buttons and change color back\n     */\n    restoreStoreButtons() {\n        document.getElementById(\"mergeSort\").disabled = false;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        buttonStyle.background = \"#000000\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        buttonStyle.background = \"#000000\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        buttonStyle.background = \"#000000\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        buttonStyle.background = \"#000000\";\n        buttonStyle.cursor = \"pointer\";\n\n    }\n/**\n * Merge Sort algorithm animations\n */\n    mergeSort() {\n        this.disableSortButtons();\n        this.disableArray();\n        //get the animations from an array \n        const [animations] = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            //every 3 values there is a new animation \n            const isColorChange = (i % 3 !== 2);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                //change the color of the values that we are comparing\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const color = (i % 3 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                //after animations, move on to the next group \n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        //this will restore the buttons after the animations are over\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n        setTimeout(() => this.restoreArray(), RESTORE_TIME); \n    }\n    /**\n    * Quick Sort algorithm animations\n    */\n    quickSort() {\n        this.disableSortButtons();\n        this.disableArray();\n        const [animations] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            //set a new animation every 6 values \n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if(barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    //change the color of the values that we are comparing \n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                //after the comparison is complete, move on to the next group\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        //this will restore the buttons after the animations are over\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n        setTimeout(() => this.restoreArray(), RESTORE_TIME); \n    }\n    /**\n    * Bubble Sort algorithm animations\n    */\n    bubbleSort() {\n        this.disableSortButtons();\n        this.disableArray();\n        //get the animations from the array \n        const [animations] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            //every 4 values a new animations starts \n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS_BUBBLE_SELECTION);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS_BUBBLE_SELECTION);  \n            }\n        }\n        //this will restore the buttons after the animations are over\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS_BUBBLE_SELECTION*animations.length);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n        setTimeout(() => this.restoreArray(), RESTORE_TIME); \n    }\n   /**\n    * Selection Sort algorithm animations\n    */\n    selectionSort() {\n        this.disableSortButtons();\n        this.disableArray();\n        //get the animations from the array\n        const [animations] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                //set the color of the initial bar and tha comparison bar\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS_BUBBLE_SELECTION);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS_BUBBLE_SELECTION);  \n            }\n        }\n        //this will restore the buttons after the animations are over\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS_BUBBLE_SELECTION*animations.length);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n        setTimeout(() => this.restoreArray(), RESTORE_TIME); \n\n    }\n    \n    /**\n     * Here is the code for displaying the graph container and buttons\n     */\n    render() {\n        const styles = {\n            white: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n            black: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`\n          };\n\n        const array = this.state.array;\n        const SORT_BUTTONS = 4;\n        return(\n <>\n       \n            <div className=\"array-container\" style={{position: 'absolute', display: 'inline-block'}}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                            display: 'inline-block',\n                            width: '.3vw',\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }} \n                    ></div>\n                ))}\n            </div>\n            <div\n            style={{\n              backgroundColor: styles.black(0.05),\n              minHeight: \"100vh\",\n              position: \"relative\"\n            }}\n          >\n            <div className=\"buttons\" > \n                <button title=\"Generates a new random array\" id = \"resetArray\" style={{position:'relative', top:`${(0)}px`}} onClick={() => this.resetArray()}>\n                    Generate New Array\n                </button>\n                <button id = \"mergeSort\" style={{position:'relative',left: `${SORT_BUTTONS*3}px`,top:`${0}px`}} onClick={() => this.mergeSort()}>\n                    Merge Sort\n                </button>\n                <button id = \"quickSort\" style={{position:'relative', left: `${SORT_BUTTONS*6}px`, top:`${0}px`}} onClick={() => this.quickSort()}>\n                    Quick Sort\n                </button>\n                <button id = \"bubbleSort\" style={{position:'relative', left: `${SORT_BUTTONS*9}px`, top:`${0}px`}} onClick={() => this.bubbleSort()}>\n                    Bubble Sort\n                </button>\n                <button id = \"selectionSort\" style={{position:'relative', left: `${SORT_BUTTONS*12}px`, top:`${0}px`}} onClick={() => this.selectionSort()}>\n                    Selection Sort\n                </button>\n            </div>  \n              </div>\n            </>\n        );\n    }\n}\n\n\nexport default SortingVisualizer;\n\n\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport './App.css'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer />\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}